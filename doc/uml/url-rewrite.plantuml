' Licensed under the Apache License, Version 2.0 (the "License");
' you may not use this file except in compliance with the License.
' You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
' Unless required by  applicable law or agreed to in writing, software distributed under the License is distributed
' on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and limitations under the License.

@startuml

hide empty members

class UrlRewrite  {
  forward_mappings
  reverse_mappings
  permanent_redirects
  temporary_redirects
  forward_mappings_with_recv_port
}

UrlRewrite --|> RefCountObj
UrlRewrite --* MappingStore
UrlRewrite --* RemapFilter::List
note top: Owning storage for filters
class RemapFilter::List << IntrusiveDList >> {
}
RemapFilter::List --* "*" RemapFilter

class MappingStore {
  Rule collection
}

MappingStore --* "*" RegexMapping
MappingStore --* "1" URLTable

class URLTable <<std::unordered_map>> {
  key: FQDN
  value: UrlMappingPathIndex
}

URLTable --* "*" UrlMappingPathIndex

class RemapFilter {
  Access check
  ============
  string name
  IpMap src_ip
  IpMap proxy_ip
  std::vector<RemapArg> argv
}

RemapFilter --* "*" RemapArg
RemapFilter --* "2" IpMap

class url_mapping {
  rewrite rule
  ================
  URL from
  URL to
}
note right: Mapping type is determined by\nwhich MappingStore owns\nthis mapping.

url_mapping --* "1" FilterVector
note top: Pointers to elements in\nUrlRewrite::FilterList

class FilterVector << std::vector >> {
}

url_mapping --* "1" RemapPluginInfoList
url_mapping --* "1" RefererInfo::List
url_mapping --* "1" RedirectChunkList
url_mapping --* "2" URL

class RemapPluginInfoList << std::vector >> {
  Pointers to global
  remap plugin data.
}
RemapPluginInfoList --o "*" RemapPluginInfo

class RedirectChunkList << std::vector >> {
}
RedirectChunkList --* "*" RedirectChunk

RefererInfo::List --* "*" RefererInfo

class RefererInfo::List << IntrusiveDList >> {
}

class RefererInfo {
  Host rewrite from Referer
}

class RedirectChunk {
}

class UrlMappingPathIndex {
}

class UrlMappingTrie << Trie >> {
  key: path
  value: url_mapping
}

class UrlMappingGroup << std::map >> {
  key: { scheme, port }
  value: UrlMappingTrie
}

UrlMappingPathIndex --* "1" UrlMappingGroup
UrlMappingGroup --* "*" UrlMappingTrie
UrlMappingTrie --* "*" url_mapping

RegexMapping --* "1" url_mapping

@enduml
